1 阐述数组的概念及定义格式

	数组的概念 : 存储同一种数据类型多个元素的容器
	
	数组的定义格式 : 
		数据类型[] 数组名 ;		int[] arr; 推荐使用方式
		数据类型 数组名[] ;		int arr[];

2 独立编写数组初始化及获取数组元素的案例

	数组初始化 : 为数组开辟内存空间
		1 动态初始化 
			格式 : 数据类型[] 数组名 = new 数据类型[数组的长度];
			特点 : 我们给定数组的长度, 初始化值由系统决定
			
		2 静态初始化
			格式 :
				完整格式  	数据类型[] 数组名 = new 数据类型[]{元素1, 元素2, 元素3...};
				简化格式	数据类型[] 数组名 = {元素1, 元素2, 元素3...};	推荐使用!
			特点 : 我们给定数组的初始化值, 长度由系统决定
	
	获取数组元素 : 数组名[索引]

3 阐述Java中的内存分配

	1 栈内存 : 存储是局部变量
		局部变量 : 定义在方法中或者方法的声明上的变量
		特点 : 局部变量在使用完毕, 会立即被回收
		
	2 堆内存 : 存储的是new出来的东西(实体, 对象)
		对象的特点 :
			1 每个对象都有地址值
			2 每个对象中数据都有默认值
				基本数据类型 :
					整数类型 byte, short , int , long  : 0
					浮点类型 float , double  : 0.0
					字符类型 char  : '\u0000'
					布尔类型 boolean : false
				
				引用数据类型 : null
			3 对象在使用完毕, 在垃圾回收器空闲时被回收
	
	
	3 方法区
	4 本地方法区
	5 寄存器

4 阐述一个数组的内存图结构
5 阐述两个数组的内存图结构
6 阐述两个数组指向同一个堆内存的内存图结构

7 阐述数组静态初始化的方式并编写代码测试
	静态初始化
		格式 :
			完整格式  	数据类型[] 数组名 = new 数据类型[]{元素1, 元素2, 元素3...};
			简化格式	数据类型[] 数组名 = {元素1, 元素2, 元素3...};	推荐使用!
		特点 : 我们给定数组的初始化值, 长度由系统决定
		
		举例 : float[] fs = {12.12F , 13.13F , 14};

8 阐述数组操作的常见问题及解决方案

	ArrayIndexOutOfBoundsException : 数组的索引越界
	产生异常的原因 : 访问了不存在的索引
	解决方案 : 不访问不存在的索引
	
	
	NullPointerException : 空指针异常
	产生异常的原因 : 对象为null , 还在使用对象访问其元素
	解决方案 : 修改代码, 不让对象为null
	
	
	

9 独立编写数组遍历的案例
	
	public static void main(String[] args) {
		int[] arr = { 1, 2, 3, 4, 5 };

		// [1, 2, 3, 4, 5]
		System.out.print("[");
		for (int i = 0; i < arr.length; i++) {
			if (i == arr.length - 1) {
				System.out.println(arr[i] + "]");
			} else {
				System.out.print(arr[i] + ", ");
			}
		}
	}


10 独立编写求数组元素最值的案例
	public static void main(String[] args) {
		int[] arr = { 1, 2, 3, 4, 5 };
			
		int max = arr[0];
		
		for(int i = 1 ; i < arr.length ; i++){
			if(arr[i] > max){
				max = arr[i];
			}
		}
		System.out.println("数组的最大值为:"+max);
		
		
		int min = arr[0];
		
		for(int i = 1 ; i < arr.length ; i++){
			if(arr[i] < min){
				min = arr[i];
			}
		}
		System.out.println("数组的最小值为:"+min);
	}

11 独立编写评委打分的案例
	public static void main(String[] args) {
	
		int[] arr = new int[6];
		
		Scanner sc = new Scanner(System.in);
		
		// 给数组的每一个元素赋值
		for(int i = 0 ; i < arr.length ; i++){
			System.out.println("第"+(i+1)+"个评委给的分数:");
			arr[i] = sc.nextInt();
		}
		
		// 求总分
		int sum = 0;
		for(int i = 0 ; i < arr.length ; i++){
			sum += arr[i];
		}
		
		// 求最大值
		int max = arr[0];
		
		for(int i = 1 ; i < arr.length ; i++){
			if(arr[i] > max){
				max = arr[i];
			}
		}
		
		
		// 求最小值
		int min = arr[0];
		
		for(int i = 1 ; i < arr.length ; i++){
			if(arr[i] < min){
				min = arr[i];
			}
		}
		
		
		System.out.println("平均分为:"+ (sum - max - min) / 4.0);

	}



12 独立编写不死神兔案例
	public static void main(String[] args) {
		int[] arr = new int[20];

		arr[0] = 1;
		arr[1] = 1;

		System.out.println("第1个月的兔子对数为:" + arr[0]);
		System.out.println("第2个月的兔子对数为:" + arr[1]);
		for (int i = 2; i < arr.length; i++) {

			arr[i] = arr[i - 1] + arr[i - 2];
			System.out.println("第" + (i + 1) + "个月的兔子对数为:" + arr[i]);
		}
	}
	
	
	
	
	// 了解!
	public static void main(String[] args) {
		int[] arr = { 1, 2, 3, 4, 5 };
		System.out.print("反转前:[");
		for (int i = 0; i < arr.length; i++) {
			if (i == arr.length - 1) {
				System.out.println(arr[i] + "]");
			} else {
				System.out.print(arr[i] + ", ");
			}
		}

		// 给数组的元素反转
		for (int startIndex = 0, endIndex = arr.length - 1; startIndex < endIndex; startIndex++, endIndex--) {
			int temp = arr[startIndex];
			arr[startIndex] = arr[endIndex];
			arr[endIndex] = temp;
		}

		System.out.print("反转后:[");
		for (int i = 0; i < arr.length; i++) {
			if (i == arr.length - 1) {
				System.out.println(arr[i] + "]");
			} else {
				System.out.print(arr[i] + ", ");
			}
		}

	}
	
	
	
	 * 百钱买百鸡 : 一百文钱买一百只鸡
	 * 公鸡 	5文钱一只
	 * 母鸡 	3文钱一只
	 * 小鸡	一文钱三只
	 * 求公鸡母鸡小鸡的数量 : 答案有四个	
	 * 
	 * 
	 * 动态初始化一个数组,长度为10 , 采用随机数给数组进行赋值,随机数的范围是1-10
	 * 数组的元素不能重复




